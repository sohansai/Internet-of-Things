#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include <SimpleDHT.h>
/************************* WiFi Access Point *********************************/

#define WLAN_SSID       "xxxxxxxxxx"
#define WLAN_PASS       "xxxxxxxxxx"
// Adafruit IO
#define AIO_SERVER      "io.adafruit.com"//Broker domain Name
#define AIO_SERVERPORT  1883  //The port at which broker is listening
#define AIO_USERNAME    "XXXXXXXXXXXXX"   //update with your username
#define AIO_KEY         "xxxxxxxxxxxxx" // update ur key ty

/************ Global State (you don't need to change this!) ******************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiClientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/

// Setup a feed called 'photocell' for publishing.
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>

Adafruit_MQTT_Publish Temperature1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Temperature1");
Adafruit_MQTT_Publish Humidity1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Humidity1");

// Setup a feed called 'onoff' for subscribing to changes.
int pinDHT11 = D3;

SimpleDHT11 dht11(pinDHT11);
byte hum = 0;  //Stores humidity value
byte temp = 0; //Stores temperature value
void setup() {
Serial.begin(115200); //Start the serial communication for debugging
Serial.println(F("Adafruit IO Example"));

  // Connect to WiFi access point.

Serial.println(); Serial.println();
delay(10);
Serial.print(F("Connecting to "));
Serial.println(WLAN_SSID);
WiFi.begin(WLAN_SSID, WLAN_PASS);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(F("."));
  }
Serial.println();
Serial.println(F("WiFi connected"));
Serial.println(F("IP address: "));
Serial.println(WiFi.localIP());

  // connect to adafruitio
connect();

}

// connect to adafruitio via MQTT

void connect() {
Serial.print(F("Connecting to Adafruit IO... "));
int8_t ret;
while ((ret = mqtt.connect()) != 0) {
switch (ret) {
case 1: Serial.println(F("Wrong protocol")); break;
case 2: Serial.println(F("ID rejected")); break;
case 3: Serial.println(F("Server unavail")); break;
case 4: Serial.println(F("Bad user/pass")); break;
case 5: Serial.println(F("Not authed")); break;
case 6: Serial.println(F("Failed to subscribe")); break;
default: Serial.println(F("Connection failed")); break;
    }

if(ret >= 0)
mqtt.disconnect();

Serial.println(F("Retrying connection..."));
delay(10000);
  }
Serial.println(F("Adafruit IO Connected!"));
}

void loop() {
  // ping adafruitio a few times to make sure we remain connected
if(! mqtt.ping(3)) {
    // reconnect to adafruitio
if(! mqtt.connected())
connect();
  }
dht11.read(&temp, &hum, NULL);
Serial.print((int)temp); Serial.print(" *C, "); 
Serial.print((int)hum); Serial.println(" H");
delay(5000);

if (! Temperature1.publish(temp)) {                  //Publish to Adafruit
Serial.println(F("Failed"));
    } 
if (! Humidity1.publish(hum)) {                  //Publish to Adafruit
Serial.println(F("Failed"));
    }
else {
Serial.println(F("Sent!"));
    }
}


